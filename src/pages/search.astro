---
import { type CollectionEntry, getCollection } from "astro:content";
import { Icon } from "astro-icon/components";
import RootLayout from "@/layouts/root-layout.astro";

const blogEntries = await getCollection("blog");
const entries = blogEntries.map((entry) => ({
  slug: entry.data.slug,
  title: entry.data.title,
  description: entry.data.description ?? "",
}));
const initialQuery =
  new URLSearchParams(Astro.request.url.split("?")[1] || "").get("q") || "";
---

<RootLayout>
  <head slot="head">
    <link
      rel="search"
      type="application/opensearchdescription+xml"
      title="t128n Blog Search"
      href="/opensearch.xml"
    />
  </head>
  <form
    id="search-form"
    autocomplete="off"
    role="search"
    aria-label="Site search"
    on:submit|preventDefault
  >
    <input
      id="search"
      type="text"
      name="q"
      placeholder="Search..."
      value={initialQuery}
      aria-label="Search blog posts"
    />
    <button type="submit" aria-label="Submit search">
      <Icon name="pixelarticons:search" />
    </button>
  </form>
  <ul id="results" aria-live="polite"></ul>
</RootLayout>

<script type="module">
  const entries = JSON.parse(
    document.getElementById("search-entries-data").textContent,
  );
  const input = document.getElementById("search");
  const results = document.getElementById("results");

  function renderResults(query) {
    const q = query.trim().toLowerCase();
    results.innerHTML = "";
    const filtered = !q
      ? entries
      : entries.filter(
          (entry) =>
            entry.title.toLowerCase().includes(q) ||
            (entry.description && entry.description.toLowerCase().includes(q)),
        );
    if (filtered.length === 0) {
      results.innerHTML = "<li>No results found.</li>";
      return;
    }
    for (const entry of filtered) {
      const li = document.createElement("li");
      li.innerHTML = `<a href="/blog/${entry.slug}"><strong>${entry.title}</strong>${entry.description ? `<br><span>${entry.description}</span>` : ""}</a>`;
      results.appendChild(li);
    }
  }

  // On page load, set input value from URL param and render results accordingly
  const params = new URLSearchParams(window.location.search);
  const urlQuery = params.get("q") || "";
  if (input.value !== urlQuery) {
    input.value = urlQuery;
  }
  renderResults(input.value);

  input.addEventListener("input", () => {
    renderResults(input.value);
    const params = new URLSearchParams(window.location.search);
    params.set("q", input.value);
    window.history.replaceState(
      {},
      "",
      `${window.location.pathname}?${params}`,
    );
  });
</script>
<script
  id="search-entries-data"
  type="application/json"
  set:html={JSON.stringify(entries)}
/>

<style>
  ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }
  form {
    display: flex;
    flex-direction: row;
    align-items: center;
    background-color: var(--color-bg-2);
    border: 1px solid var(--color-ui);
  }
  form:focus-within {
    border: 1px solid var(--color-primary);
    border-radius: var(--border-radius);
  }
  input {
    padding: var(--space-sm) var(--space-md);
    border: none;
    font-size: var(--text-base);
    background-color: transparent;
    flex: 1;
  }
  input:focus {
    outline: none;
    border-color: var(--color-primary);
  }
  button {
    background-color: transparent;
    border: none;
    cursor: pointer;
    padding: var(--space-sm) var(--space-md);
  }
  button:hover {
    color: var(--color-primary);
  }
</style>
