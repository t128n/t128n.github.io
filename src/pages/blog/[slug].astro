---
import { getCollection, render } from "astro:content";
import BlogComments from "@/components/blog-comments.astro";
import BlogOutline from "@/components/blog-outline.astro";
import BlogSharing from "@/components/blog-sharing.astro";
import RelatedPosts from "@/components/related-posts.astro";
import Breadcrumb from "@/components/breadcrumb.astro";
import RootLayout from "@/layouts/root-layout.astro";
import title from "@/lib/title";
import { enhanceBlogDescription, extractReadingTime, calculateWordCount } from "@/lib/seo";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(post);

// SEO enhancements
const enhancedDescription = enhanceBlogDescription(post.data.description || "", post.data.tags);
const readingTime = extractReadingTime(remarkPluginFrontmatter);
const keywords = post.data.tags || [];

/**
 * TODO: Add an outline component OUTSIDE of the RootLayout.
 * The `render(post)` function exposes an array of headings that can be used
 * to generate an outline for the page.
 * We deliberately access, but do not use the `headings` variable here to keep
 * it as a reminder for future development.
 */
---

<RootLayout 
  title={title(post.data.title)} 
  description={enhancedDescription}
  keywords={keywords}
  type="article"
>
  <Fragment slot="head">
    <!-- Blog-specific meta tags -->
    <meta name="article:author" content="Torben Haack" />
    <meta name="article:published_time" content={post.data.publishDate.toISOString()} />
    {post.data.updatedDate && (
      <meta name="article:modified_time" content={post.data.updatedDate.toISOString()} />
    )}
    {post.data.tags && post.data.tags.map(tag => (
      <meta name="article:tag" content={tag} />
    ))}
    
    <!-- Enhanced Breadcrumb Schema -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        itemListElement: [
          {
            "@type": "ListItem",
            position: 1,
            name: "Home",
            item: Astro.site,
          },
          {
            "@type": "ListItem",
            position: 2,
            name: "Blog",
            item: `${Astro.site}blog/`,
          },
          {
            "@type": "ListItem",
            position: 3,
            name: post.data.title,
            item: Astro.url,
          },
        ],
      })}
    />
    
    <!-- Enhanced BlogPosting Schema -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": ["BlogPosting", "Article", "TechnicalArticle"],
        "@id": `${Astro.url}/#article`,
        mainEntityOfPage: {
          "@type": "WebPage",
          "@id": Astro.url,
        },
        headline: post.data.title,
        description: enhancedDescription,
        datePublished: post.data.publishDate.toISOString(),
        dateModified: post.data.updatedDate?.toISOString() || post.data.publishDate.toISOString(),
        author: {
          "@type": "Person",
          "@id": `${Astro.site}/#person`,
          name: "Torben Haack",
          url: Astro.site,
        },
        publisher: {
          "@type": "Person",
          "@id": `${Astro.site}/#person`,
          name: "Torben Haack",
          url: Astro.site,
        },
        image: {
          "@type": "ImageObject",
          url: `${Astro.site}${Astro.url.pathname}og-image.png`,
          width: 1200,
          height: 630,
        },
        keywords: post.data.tags?.join(", "),
        articleSection: "Technology",
        genre: "Technology",
        wordCount: remarkPluginFrontmatter?.readingTime?.words || 0,
        timeRequired: readingTime > 0 ? `PT${Math.ceil(readingTime)}M` : undefined,
        inLanguage: "en-US",
        isAccessibleForFree: true,
        articleBody: post.body,
      })}
    />
  </Fragment>
  
  <Fragment slot="default">
    <Breadcrumb 
      items={[
        { name: "Home", href: "/" },
        { name: "Blog", href: "/blog" },
        { name: post.data.title }
      ]}
    />
    
    <article>
    <header>
      <h1>{title(post.data.title)}</h1>
      <p>{enhancedDescription}</p>
      <div class="meta">
        <time datetime={post.data.publishDate.toISOString()}>
          {post.data.publishDate.toISOString().split("T")[0]}
        </time>
        {readingTime > 0 && (
          <span class="reading-time">
            â€¢ {Math.ceil(readingTime)} min read
          </span>
        )}

      </div>
    </header>

    <Content />
    </article>
    
    <BlogSharing
      title={post.data.title}
      description={post.data.description}
      url={Astro.url}
    />
    
    {post.data.tags && post.data.tags.length > 0 && (
      <div class="tags-footer">
        {post.data.tags.map(tag => (
          <span class="tag">#{tag}</span>
        ))}
      </div>
    )}
    
    <RelatedPosts currentPost={post} />
    <BlogComments />
  </Fragment>
</RootLayout>

<style>
  /* Page & Layout Styles */
  header {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    margin-bottom: var(--space-6);
  }
  
  header h1 {
    font-size: var(--text-xl);
    font-weight: 500;
    margin: 0;
    line-height: var(--line-height-tight);
  }
  
  header p {
    color: var(--color-text-secondary);
    margin: 0;
    line-height: var(--line-height-relaxed);
  }
  
  header .meta {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-2);
    margin-top: var(--space-3);
    flex-wrap: wrap;
  }

  header .meta time,
  header .meta .reading-time {
    font-size: var(--text-sm);
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  header .meta .tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-1);
  }

  header .meta .tag {
    font-size: var(--text-xs);
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  header .meta .tag.more {
    color: var(--color-text-secondary);
  }

  /* Tags in footer section */
  .tags-footer {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-2);
    justify-content: center;
    padding: var(--space-4) 0;
    margin-bottom: var(--space-4);
  }

  .tags-footer .tag {
    font-size: var(--text-sm);
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    background-color: var(--color-background-secondary);
    border: var(--border-width) var(--border-style) var(--color-border);
    padding: var(--space-1) var(--space-2);
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .tags-footer .tag:hover {
    background-color: var(--color-border);
    color: var(--color-text-primary);
  }

  .tags-footer .tag.more {
    color: var(--color-text-secondary);
    background-color: transparent;
    border: none;
    padding: var(--space-1) 0;
  }

  @media (min-width: 640px) {
    header .meta {
      justify-content: space-between;
      flex-wrap: nowrap;
    }
  }
  
  header div {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    align-items: flex-end;
  }
  
  header div p {
    font-size: var(--text-xs);
    color: var(--color-secondary);
    font-family: var(--font-mono);
    text-align: right;
    line-height: var(--line-height-normal);
  }

  hgroup {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    flex: 1;
  }
  
  hgroup h1 {
    font-size: var(--text-3xl);
    font-family: var(--font-mono);
    letter-spacing: var(--letter-spacing-tight);
    line-height: var(--line-height-tight);
    font-weight: var(--font-semibold);
    margin: 0;
  }
  
  header hgroup p {
    font-size: var(--text-base);
    color: var(--color-secondary);
    line-height: var(--line-height-relaxed);
    margin: 0;
  }
  
  header time {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    color: var(--color-secondary);
    white-space: nowrap;
    line-height: var(--line-height-normal);
  }
  
  @media (max-width: 640px) {
    header {
      flex-direction: column;
      gap: var(--space-3);
    }
    
    hgroup h1 {
      font-size: var(--text-2xl);
    }
    
    header div {
      align-items: flex-start;
    }
    
    header div p {
      text-align: left;
    }
  }
</style>

<style>
  /* Typography Tweaks */
  article {
    line-height: var(--line-height-relaxed);
    display: flex;
    flex-direction: column;
    gap: var(--space-4);
    font-family: var(--font-sans);
  }

  article :global(h1),
  article :global(h2),
  article :global(h3),
  article :global(h4),
  article :global(h5),
  article :global(h6) {
    font-weight: 500;
    line-height: var(--line-height-tight);
    margin: var(--space-4) 0 var(--space-2) 0;
    font-family: var(--font-sans);
  }

  article :global(h1) {
    font-size: var(--text-xl);
  }
  article :global(h2) {
    font-size: var(--text-lg);
  }
  article :global(h3) {
    font-size: var(--text-base);
  }
  article :global(h4) {
    font-size: var(--text-base);
  }
  article :global(h5) {
    font-size: var(--text-sm);
  }
  article :global(h6) {
    font-size: var(--text-sm);
  }

  article :global(p) {
    margin: 0 0 var(--space-3) 0;
    line-height: var(--line-height-relaxed);
    font-family: var(--font-sans);
  }

  article :global(pre) {
    font-size: var(--text-sm);
    line-height: var(--line-height);
    padding: var(--space-3);
    background-color: var(--color-background-secondary);
    border: var(--border-width) var(--border-style) var(--color-border);
    margin: var(--space-4) 0;
    overflow-x: auto;
    font-family: var(--font-mono);
  }

  article :global(code) {
    font-size: var(--text-sm);
    background-color: var(--color-background-secondary);
    padding: 0.1em 0.2em;
    font-family: var(--font-mono);
  }

  article :global(pre code) {
    padding: 0;
    background-color: transparent;
  }

  article :global(hr) {
    border: none;
    border-top: var(--border-width) var(--border-style) var(--color-border);
    margin: var(--space-6) 0;
  }

  article :global(ul),
  article :global(ol) {
    margin: 0 0 var(--space-3) var(--space-4);
    padding: 0;
    font-family: var(--font-sans);
  }

  article :global(li) {
    margin: 0 0 var(--space-1) 0;
    line-height: var(--line-height-relaxed);
    font-family: var(--font-sans);
  }

  article :global(blockquote) {
    border-left: 2px solid var(--color-border);
    padding-left: var(--space-3);
    margin: var(--space-4) 0;
    color: var(--color-text-secondary);
    font-family: var(--font-sans);
  }

  article :global(a) {
    color: var(--color-accent);
    text-decoration: underline;
    text-decoration-color: var(--color-border);
  }

  article :global(a:hover) {
    text-decoration-color: var(--color-accent);
  }
</style>
