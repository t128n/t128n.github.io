---
import { getCollection, render } from "astro:content";
import BlogComments from "@/components/blog-comments.astro";
import RootLayout from "@/layouts/root-layout.astro";
import title from "@/lib/title";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await render(post);
/**
 * TODO: Add an outline component OUTSIDE of the RootLayout.
 * The `render(post)` function exposes an array of headings that can be used
 * to generate an outline for the page.
 * We deliberately access, but do not use the `headings` variable here to keep
 * it as a reminder for future development.
 */
---

<RootLayout title={title(post.data.title)} description={post.data.description}>
  <Fragment slot="head">
    <meta name="keywords" content={post.data.tags?.join(", ")} />
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        itemListElement: [
          {
            "@type": "ListItem",
            position: 1,
            name: "Home",
            item: Astro.site,
          },
          {
            "@type": "ListItem",
            position: 2,
            name: post.data.title,
            item: Astro.url,
          },
        ],
      })}
    />
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BlogPosting",
        "@id": `${Astro.url}/#blogposting`,
        mainEntityOfPage: Astro.url,
        headline: post.data.title,
        description: post.data.description,
        datePublished: post.data.publishDate.toISOString(),
        dateModified: post.data.updatedDate?.toISOString(),
        author: {
          "@id": `${Astro.site}/#person`,
        },
        publisher: {
          "@id": `${Astro.site}/#person`,
        },
        keywords: post.data.tags,
        articleSection: "Blog",
      })}
    />
  </Fragment>
  <article slot="default">
    <header>
      <hgroup>
        <h1>{title(post.data.title)}</h1>
        <p>
          {post.data.description}
        </p>
      </hgroup>

      <time datetime={post.data.publishDate.toISOString()}>
        {post.data.publishDate.toISOString().split("T")[0]}
      </time>
    </header>

    <Content />
  </article>
  <BlogComments />
</RootLayout>

<style>
  /* Page & Layout Styles */
  header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: start;
    gap: var(--space-xs);
    margin-bottom: var(--space-lg);
    line-height: 1.2;
  }

  hgroup {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }
  hgroup h1 {
    font-size: var(--text-3xl);
    font-family: var(--font-mono);
    letter-spacing: var(--letter-spacing);
    display: inline-block;
  }
  header hgroup p {
    font-size: var(--text-base);
    color: var(--color-tx-2);
    font-family: var(--font-mono);
  }
  header time {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    color: var(--color-tx-2);
    white-space: nowrap;
  }
</style>

<style>
  /* Typography Tweaks */
  article {
    line-height: 1.6;
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }

  article :global(h1),
  article :global(h2),
  article :global(h3),
  article :global(h4),
  article :global(h5),
  article :global(h6) {
    line-height: 1.2;
    margin-bottom: var(--space-sm);
    text-box: trim-both cap alphabetic;
    text-wrap: balance;
    font-family: var(--font-mono);
  }

  article :global(h1) {
    font-size: var(--text-4xl);
  }
  article :global(h2) {
    font-size: var(--text-lg);
  }
  article :global(h3) {
    font-size: var(--text-base);
  }
  article :global(h4) {
    font-size: var(--text-sm);
  }
  article :global(h5) {
    font-size: var(--text-xs);
  }
  article :global(h6) {
    font-size: var(--text-xs);
  }

  article :global(pre) {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    line-height: 1.4;
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--space-xs);
  }
</style>
