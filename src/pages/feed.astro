---
import { getCollection, render } from "astro:content";
import { Icon } from "astro-icon/components";
import RootLayout from "@/layouts/root-layout.astro";

const feed = await getCollection("feed");

function idToDate(id: string): Date {
  const year = parseInt(id.slice(0, 4), 10);
  const month = parseInt(id.slice(4, 6), 10) - 1; // month is 0-indexed in JavaScript
  const day = parseInt(id.slice(6, 8), 10);
  const hours = parseInt(id.slice(8, 10), 10);
  const minutes = parseInt(id.slice(10, 12), 10);
  return new Date(Date.UTC(year, month, day, hours, minutes));
}

const sortedFeed = feed.sort(
  (a, b) => idToDate(b.id).getTime() - idToDate(a.id).getTime(),
);
const renderedFeed = await Promise.all(
  sortedFeed.map(async (post) => {
    const { Content } = await render(post);
    return { post, Content };
  }),
);
---

<RootLayout
  title="Feed"
  description="A collection of my latest thoughts and updates."
>
  <ul>
    {
      renderedFeed.map(({ post, Content }) => (
        <li id={post.id}>
          <header>
            <a href={`#${post.id}`} data-clipboard={`${Astro.url}#${post.id}`}>
              <Icon name="pixelarticons:paperclip" />
              <span>Copy Link to Clipboard</span>
            </a>
            <time datetime={idToDate(post.id).toISOString()}>
              {idToDate(post.id).toISOString()}
            </time>
          </header>
          <Content />
        </li>
      ))
    }
  </ul>
</RootLayout>

<script type="module">
  document.addEventListener("click", (event) => {
    const link = event.target.closest("[data-clipboard]");
    if (!link) return;

    const url = link.getAttribute("data-clipboard");
    const label =
      link.querySelector("[data-label]") || link.querySelector("span");
    if (!url || !label) return;

    const updateLabel = (text, revertText, ms = 2000) => {
      label.textContent = text;
      setTimeout(() => {
        label.textContent = revertText;
      }, ms);
    };

    navigator.clipboard
      .writeText(url)
      .then(() => {
        updateLabel("Link copied to clipboard!", "Copy Link");
        link.setAttribute("aria-live", "polite");
        link.setAttribute("aria-label", "Link copied to clipboard!");
        setTimeout(() => {
          link.removeAttribute("aria-label");
        }, 2000);
      })
      .catch((err) => {
        console.error("Failed to copy link: ", err);
        updateLabel("Failed to copy link", "Copy Link");
      });
  });
</script>

<script type="module">
  function getRelativeTimeString(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now.getTime() - date.getTime();

    const rtf = new Intl.RelativeTimeFormat("en", { style: "short" });

    const minute = 60 * 1000;
    const hour = 60 * minute;
    const day = 24 * hour;
    const week = 7 * day;
    const month = 30 * day;
    const year = 365 * day;

    let value;
    let unit;

    if (diff < minute) {
      value = Math.round(diff / 1000);
      unit = "second";
    } else if (diff < hour) {
      value = Math.round(diff / minute);
      unit = "minute";
    } else if (diff < day) {
      value = Math.round(diff / hour);
      unit = "hour";
    } else if (diff < week) {
      value = Math.round(diff / day);
      unit = "day";
    } else if (diff < month) {
      value = Math.round(diff / week);
      unit = "week";
    } else if (diff < year) {
      value = Math.round(diff / month);
      unit = "month";
    } else {
      value = Math.round(diff / year);
      unit = "year";
    }

    return rtf.format(-value, unit);
  }

  function updateAllTimeElements() {
    const timeElements = document.querySelectorAll("time");
    timeElements.forEach((time) => {
      const datetime = time.getAttribute("datetime");
      if (datetime) {
        time.textContent = getRelativeTimeString(datetime);
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", updateAllTimeElements);
  } else {
    updateAllTimeElements();
  }
</script>

<style>
  ul {
    list-style: none;
    padding: 0;
    margin: 0;

    display: flex;
    flex-direction: column;
  }

  li {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    scroll-margin-top: var(--space-lg);
  }

  li::after {
    content: "";
    display: block;
    width: 100%;
    border-bottom: 1px solid var(--color-ui-2);
    margin: var(--space-xl) 0;
  }
  li:last-child::after {
    display: none;
  }

  li header {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  li header a {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    color: var(--color-tx-2);
    font-size: var(--text-sm);
  }
  li header a:hover {
    color: var(--color-primary);
  }

  ul :global(code) {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    border-radius: var(--space-xs);
    font-weight: 600;
    background: var(--color-ui);
    padding: var(--space-xs) var(--space-sm);
  }

  ul li time {
    font-family: var(--font-mono);
    font-size: var(--text-xs);
    color: var(--color-tx-2);
    white-space: nowrap;
  }
</style>
