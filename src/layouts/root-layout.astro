---
import PageFooter from "@/components/page-footer.astro";
import PageHeader from "@/components/page-header.astro";
import { getOgImageUrl } from "@/lib/og";
import { generateSEOTitle, truncateDescription, STATIC_PAGES_SEO } from "@/lib/seo";
import "@fontsource/jetbrains-mono/400.css";
import "@fontsource/jetbrains-mono/500.css";
import "@fontsource/inter/400.css";
import "@fontsource/inter/500.css";

interface RootLayoutProps {
  title?: string;
  description?: string;
  keywords?: string[];
  type?: 'website' | 'article' | 'profile';
}

// Get current page slug for static page SEO data
const currentPath = Astro.url.pathname;
const pageSlug = currentPath === '/' ? 'index' : currentPath.replace(/^\/+|\/+$/g, '');
const staticPageSEO = STATIC_PAGES_SEO[pageSlug];

const {
  title = staticPageSEO?.title || "Torben Haack",
  description = staticPageSEO?.description || "Software engineer focused on building reliable platforms, sharing practical knowledge and mentoring developers. Real-world projects, open-source tools and insights for tech professionals.",
  keywords = staticPageSEO?.keywords || [],
  type = staticPageSEO?.type || 'website',
} = Astro.props as RootLayoutProps;

const computedTitle = generateSEOTitle(title, pageSlug === 'index');
const computedDescription = truncateDescription(description);
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Charset & Viewport -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Basic Meta Tags -->
    <title>{computedTitle}</title>
    <meta name="description" content={computedDescription} />
    {keywords.length > 0 && <meta name="keywords" content={keywords.join(", ")} />}
    <meta name="author" content="Torben Haack" />

    <!-- Allow search engines to index the page -->
    <meta name="robots" content="index, follow" />

    <!-- Set Theme Color for Light Mode -->
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#ffffff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000000"
    />

    <!-- Set Canonical URL of current path -->
    <link rel="canonical" href={`${Astro.url}`} />

    <!-- Open Graph Tags -->
    <meta property="og:title" content={computedTitle} />
    <meta property="og:description" content={computedDescription} />
    <meta property="og:type" content={type} />
    <meta
      property="og:image"
      content={getOgImageUrl(Astro.site, Astro.url.pathname)}
    />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:site_name" content="t128n" />

    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@_t128n" />
    <meta name="twitter:creator" content="@_t128n" />
    <meta name="twitter:title" content={computedTitle} />
    <meta name="twitter:description" content={computedDescription} />
    <meta
      name="twitter:image"
      content={getOgImageUrl(Astro.site, Astro.url.pathname)}
    />

    <!-- Sitemap and RSS Feed -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Torben Haack [t128n]"
      href={new URL("rss.xml", Astro.site)}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- JSON-LD Schemas -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "WebSite",
        "@id": `${Astro.site}/#website`,
        url: Astro.site,
        name: "t128n - Torben Haack",
        description: computedDescription,
        author: {
          "@id": `${Astro.site}/#person`,
        },
        publisher: {
          "@id": `${Astro.site}/#person`,
        },
        potentialAction: {
          "@type": "SearchAction",
          target: {
            "@type": "EntryPoint",
            urlTemplate: `${Astro.site}/search/?q={search_term_string}`,
          },
          "query-input": "required name=search_term_string",
        },
      })}
    />

    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Person",
        "@id": `${Astro.site}/#person`,
        name: "Torben Haack",
        alternateName: "t128n",
        url: Astro.site,
        description: "Software engineer focused on building reliable platforms, sharing practical knowledge and mentoring developers.",
        image: `${Astro.site}/favicon.svg`,
        jobTitle: "Software Engineer",
        knowsAbout: ["Software Engineering", "Web Development", "System Architecture", "Technical Writing", "Developer Tools"],
        sameAs: [
          "https://twitter.com/_t128n",
          "https://github.com/t128n",
          "https://www.linkedin.com/in/torben-haack/",
        ],
        worksFor: {
          "@type": "Organization",
          name: "t128n",
        },
      })}
    />

    <slot name="head" />
  </head>
  <body>
    <PageHeader />
    <main>
      <slot />
    </main>
    <PageFooter />
  </body>
</html>

<style is:global>
  /** Reset CSS */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
    height: auto;
  }

  /* Ensure images have proper alt text - this will show in dev tools */
  img:not([alt]) {
    outline: 2px solid red;
  }
  
  img[alt=""] {
    outline: 2px solid orange;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
    font-size: inherit;
  }

  p {
    text-wrap: pretty;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    text-wrap: balance;
  }
</style>

<style is:global>
  :root {
    /* Base Colors */
    --color-black: #000000;
    --color-white: #ffffff;
    --color-gray-100: #f5f5f5;
    --color-gray-200: #e0e0e0;
    --color-gray-300: #d0d0d0;
    --color-gray-400: #a0a0a0;
    --color-gray-500: #808080;
    --color-gray-600: #606060;
    --color-gray-700: #404040;
    --color-gray-800: #202020;
    --color-gray-900: #101010;

    /* Accent Colors */
    --color-blue: #0066cc;
    --color-green: #008000;
    --color-red: #cc0000;
    --color-yellow: #cc8800;
    --color-cyan: #008080;
    --color-magenta: #800080;

    /* Font System */
    --font-mono: "JetBrains Mono", "SF Mono", "Consolas", "Menlo", "Monaco", 
                 "Liberation Mono", "Courier New", monospace;
    --font-sans: "Inter", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", 
                 "Helvetica Neue", "Arial", sans-serif;

    /* Typography Scale */
    --text-xs: 0.75rem;
    --text-sm: 0.875rem;
    --text-base: 1rem;
    --text-lg: 1.125rem;
    --text-xl: 1.25rem;
    --text-2xl: 1.5rem;

    /* Line Heights */
    --line-height: 1.4;
    --line-height-tight: 1.2;
    --line-height-relaxed: 1.6;

    /* Spacing Scale */
    --space-1: 0.25rem;
    --space-2: 0.5rem;
    --space-3: 0.75rem;
    --space-4: 1rem;
    --space-6: 1.5rem;
    --space-8: 2rem;
    --space-12: 3rem;

    /* Layout */
    --container-width: 80ch;
    --container-padding: var(--space-4);
    
    /* Borders */
    --border-width: 1px;
    --border-style: solid;
  }

  @media (prefers-color-scheme: light) {
    :root {
      --color-text: var(--color-black);
      --color-text-secondary: var(--color-gray-600);
      --color-text-muted: var(--color-gray-500);
      --color-background: var(--color-white);
      --color-background-secondary: var(--color-gray-100);
      --color-border: var(--color-gray-300);
      --color-border-light: var(--color-gray-200);
      
      --color-accent: var(--color-blue);
      --color-success: var(--color-green);
      --color-warning: var(--color-yellow);
      --color-error: var(--color-red);
    }
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --color-text: var(--color-gray-100);
      --color-text-secondary: var(--color-gray-400);
      --color-text-muted: var(--color-gray-500);
      --color-background: var(--color-black);
      --color-background-secondary: var(--color-gray-900);
      --color-border: var(--color-gray-700);
      --color-border-light: var(--color-gray-800);
      
      --color-accent: #4da6ff;
      --color-success: #40cc40;
      --color-warning: #ffcc40;
      --color-error: #ff4d4d;
    }
  }

  /* Global Styles */
  *::selection {
    background-color: var(--color-text);
    color: var(--color-background);
  }
  
  *:focus {
    outline: none;
  }

  html,
  body {
    font-family: var(--font-mono);
    font-size: var(--text-base);
    line-height: var(--line-height);
    color: var(--color-text);
    background-color: var(--color-background);
    min-height: 100vh;
  }

  body {
    display: flex;
    flex-direction: column;
    max-width: var(--container-width);
    margin: 0 auto;
    padding: var(--container-padding);
    gap: var(--space-8);
  }
  
  body > main {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }

  a {
    color: inherit;
    text-decoration: underline;
    text-decoration-color: var(--color-border);
  }
  
  a:hover {
    color: var(--color-accent);
    text-decoration-color: var(--color-accent);
  }
</style>